<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-02-20T03:35:36+00:00</updated><id>/feed.xml</id><title type="html">Steglasaurous</title><subtitle>Random scratchings from a dinosaur.</subtitle><entry><title type="html">Add bot responses to !asr twitch commands in Audica</title><link href="/audica/streamer.bot/streaming/twitch/2022/02/20/audica-bot-responses.html" rel="alternate" type="text/html" title="Add bot responses to !asr twitch commands in Audica" /><published>2022-02-20T03:00:00+00:00</published><updated>2022-02-20T03:00:00+00:00</updated><id>/audica/streamer.bot/streaming/twitch/2022/02/20/audica-bot-responses</id><content type="html" xml:base="/audica/streamer.bot/streaming/twitch/2022/02/20/audica-bot-responses.html">&lt;p&gt;Here’s how to add twitch responses to !asr commands for Audica. Admittedly, this isn’t the cleanest or simplest solution, 
but it works.  :)&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;Make sure these are installed before continuing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Silzoid/SongRequest&quot;&gt;SongRequest&lt;/a&gt; mod v2.1.0 or better (released on Feb 19 2022)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/steglasaurous/audica-websocket-server&quot;&gt;AudicaWebsocketServer&lt;/a&gt; mod v1.1 or better&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://streamer.bot&quot;&gt;Streamer.bot&lt;/a&gt; installed and connected to Twitch. (tested on v0.1.7 but earlier versions &lt;em&gt;should&lt;/em&gt; work)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-load-actions-into-streamerbot&quot;&gt;Step 1: Load actions into Streamer.bot&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Streamer.bot, goto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt; tab.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right-click anywhere in the actions list on the left, and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_1.png&quot; alt=&quot;img_1.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the giant piece of text below, and in the text box at the top, paste it.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;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
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt;.  This will import several actions that deal with processing the websocket messages
from Audica and the response messages that go to your twitch chat.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_2.png&quot; alt=&quot;img_2.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-2-fix-one-thing&quot;&gt;Step 2: Fix one thing&lt;/h1&gt;

&lt;p&gt;There will be one reference missing from one of the C# subactions, so we need to fill it in.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the Actions tab, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Audica Websocket Server&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Sub-Actions list on the right, double-click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Execute Code&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_3.png&quot; alt=&quot;img_3.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the bottom set of tabs, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;References&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the list of references, right-click and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add reference from file...&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_4.png&quot; alt=&quot;img_4.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By default, it should put you in the correct directory where the right files are.  Find and open this file to add it to the reference list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Core.dll&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_5.png&quot; alt=&quot;img_5.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Once done, your references should look like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_6.png&quot; alt=&quot;img_6.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save and Compile&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-3-setup-the-websocket-client-in-streamerbot-for-audica&quot;&gt;Step 3: Setup the websocket client in streamer.bot for Audica&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Servers/Clients&lt;/code&gt; tab, goto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Websocket Clients&lt;/code&gt; tab.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right-click and add a new websocket client.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_7.png&quot; alt=&quot;img_7.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill in the following parameters:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Audica Websocket  (This is what I used but it can be anything)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Endpoint&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws://127.0.0.1:8085/AudicaStats&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ensure &lt;strong&gt;Auto Connect on Startup&lt;/strong&gt; and &lt;strong&gt;Reconnect on Disconnect&lt;/strong&gt; are checked.&lt;/li&gt;
      &lt;li&gt;Under &lt;strong&gt;Actions&lt;/strong&gt;, for the &lt;strong&gt;Message&lt;/strong&gt; action, click the button and choose &lt;strong&gt;Audica Websocket Message&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your settings should look similar to this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img_8.png&quot; alt=&quot;img_8.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click OK.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-4-test-it&quot;&gt;Step 4: Test it!&lt;/h1&gt;

&lt;p&gt;Fire up Audica.  Once it’s started (at the Audica title screen at least), try requesting a song
in your twitch chat.  ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!asr music like this&lt;/code&gt;.  You should see a response like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2022-02-19-audica-bot-responses/img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;known-bugs&quot;&gt;Known Bugs&lt;/h1&gt;

&lt;p&gt;There is a known bug that when a song is requested that hasn’t been downloaded yet, upon downloading the missing songs
the ‘added to queue’ message is shown for each song downloaded again.  To be fixed in the next version.&lt;/p&gt;

&lt;h1 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;If you didn’t see anything right away, in streamer.bot, goto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Servers/Clients&lt;/code&gt; tab, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Websocket Clients&lt;/code&gt;, and make sure
the Audica websocket client is connected.  You can right-click on it and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect&lt;/code&gt; to trigger a connection attempt
in case it hasn’t tried to connect.&lt;/p&gt;

&lt;p&gt;Also make sure you are using the latest versions of the &lt;a href=&quot;https://github.com/steglasaurous/audica-websocket-server&quot;&gt;AudicaWebsocketServer&lt;/a&gt; mod and the &lt;a href=&quot;https://github.com/Silzoid/SongRequest&quot;&gt;SongRequest&lt;/a&gt; mod.&lt;/p&gt;

&lt;p&gt;Enjoy!  If you have questions or discussion points, feel free to drop into my discord
server &lt;a href=&quot;https://discord.gg/j6qArwGDu6&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Steg.&lt;/p&gt;</content><author><name></name></author><category term="audica" /><category term="streamer.bot" /><category term="streaming" /><category term="twitch" /><summary type="html">Here’s how to add twitch responses to !asr commands for Audica. Admittedly, this isn’t the cleanest or simplest solution, but it works. :) Prerequisites Make sure these are installed before continuing: SongRequest mod v2.1.0 or better (released on Feb 19 2022) AudicaWebsocketServer mod v1.1 or better Streamer.bot installed and connected to Twitch. (tested on v0.1.7 but earlier versions should work) Step 1: Load actions into Streamer.bot In Streamer.bot, goto the Actions tab. Right-click anywhere in the actions list on the left, and click on Import. Copy the giant piece of text below, and in the text box at the top, paste it. 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 Click on Import. This will import several actions that deal with processing the websocket messages from Audica and the response messages that go to your twitch chat. Step 2: Fix one thing There will be one reference missing from one of the C# subactions, so we need to fill it in. In the Actions tab, click on Audica Websocket Server. In the Sub-Actions list on the right, double-click on Execute Code. At the bottom set of tabs, click on References. In the list of references, right-click and select Add reference from file.... By default, it should put you in the correct directory where the right files are. Find and open this file to add it to the reference list: System.Core.dll Once done, your references should look like this: Click Save and Compile. Step 3: Setup the websocket client in streamer.bot for Audica In the Servers/Clients tab, goto the Websocket Clients tab. Right-click and add a new websocket client. Fill in the following parameters: Name: Audica Websocket (This is what I used but it can be anything) Endpoint: ws://127.0.0.1:8085/AudicaStats Ensure Auto Connect on Startup and Reconnect on Disconnect are checked. Under Actions, for the Message action, click the button and choose Audica Websocket Message Your settings should look similar to this: Click OK. Step 4: Test it! Fire up Audica. Once it’s started (at the Audica title screen at least), try requesting a song in your twitch chat. ex: !asr music like this. You should see a response like this: Known Bugs There is a known bug that when a song is requested that hasn’t been downloaded yet, upon downloading the missing songs the ‘added to queue’ message is shown for each song downloaded again. To be fixed in the next version. Troubleshooting If you didn’t see anything right away, in streamer.bot, goto the Servers/Clients tab, click on Websocket Clients, and make sure the Audica websocket client is connected. You can right-click on it and click Connect to trigger a connection attempt in case it hasn’t tried to connect. Also make sure you are using the latest versions of the AudicaWebsocketServer mod and the SongRequest mod. Enjoy! If you have questions or discussion points, feel free to drop into my discord server here! Steg.</summary></entry><entry><title type="html">Trigger Streamer.bot actions from Audica Websocket Events</title><link href="/audica/streamer.bot/streaming/twitch/2021/12/26/audica-websocket-streamerbot.html" rel="alternate" type="text/html" title="Trigger Streamer.bot actions from Audica Websocket Events" /><published>2021-12-26T18:12:49+00:00</published><updated>2021-12-26T18:12:49+00:00</updated><id>/audica/streamer.bot/streaming/twitch/2021/12/26/audica-websocket-streamerbot</id><content type="html" xml:base="/audica/streamer.bot/streaming/twitch/2021/12/26/audica-websocket-streamerbot.html">&lt;p&gt;Want to trigger streamer.bot actions from Audica Websocket events?  Here’s a quick-and-dirty way
to do just that. :)&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This depends on the &lt;a href=&quot;https://github.com/steglasaurous/audica-websocket-server&quot;&gt;Audica Websocket Server&lt;/a&gt; mod be installed in Audica.&lt;/li&gt;
  &lt;li&gt;This also requires the excellent &lt;a href=&quot;https://streamer.bot&quot;&gt;Streamer.bot&lt;/a&gt; app be installed as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-the-basics&quot;&gt;Setup the Basics&lt;/h2&gt;

&lt;p&gt;In these steps, we’ll setup the websocket connection to Audica, and turning the event messages
that are emitted from it into action arguments (variables) that can be accessed in subsequent subactions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add a new action in your actions list.  I called mine “Audica Websocket Message”. This will be the thing that takes apart the websocket message and puts it into variables you can use in subsequent subactions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add a new Execute C# Code sub-action&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste this code in:&lt;/p&gt;

    &lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Newtonsoft.Json.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CPHInline&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audicaEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;CPH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;audicaEventType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audicaEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eventType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audicaEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CPH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the bottom, goto the references tab and make sure these files are added as references:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;mscorlib.dll&lt;/li&gt;
      &lt;li&gt;System.dll&lt;/li&gt;
      &lt;li&gt;System.Core.dll&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;You can right-click on the list to choose the dll to reference - it should put you right in the Microsoft.Net\Framework\v4.0.xxxx folder and should just be a matter of finding the files named above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click “Save and Compile”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under “Servers/Clients”, goto “Websocket Clients”, and add a new client.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Endpoint: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws://127.0.0.1:8085/AudicaStats&lt;/code&gt; (or set the IP address to the machine Audica is running on if streamer.bot isn’t running on the same machine.&lt;/li&gt;
      &lt;li&gt;Under Actions &amp;gt; Message: Set this to your Action you setup in step 1.  (Audica Websocket Messages in my case)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setup-actions-to-trigger&quot;&gt;Setup Actions to trigger&lt;/h2&gt;

&lt;p&gt;So at this point, we have code that’s taking the Audica events and turning them into variables your subactions can act on.  Let’s do the songSelected event to get the selected song.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new action that will be the thing that will do something when there’s a song change.  I called mine “Set Song Info”.&lt;/li&gt;
  &lt;li&gt;For testing, I threw in a message to send the song title to my twitch chat.  I created a “Twitch &amp;gt; Send Message” sub-action and in the message contents I put:  %songName% is on now!.&lt;/li&gt;
  &lt;li&gt;Go back to your Audica Websockets Message action.   Add an If action (under Logic).  This is where you can capture the events coming from audica.  In our case we’re gonna catch the SongSelected event which contains the details of the song that was chosen.   I pasted a screenshot here.
&lt;img src=&quot;/assets/2021-12-26-audica-websocket-streamerbot/img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And boom, it werks! :slight_smile:&lt;/p&gt;

&lt;h2 id=&quot;available-variables&quot;&gt;Available Variables&lt;/h2&gt;

&lt;p&gt;You may be asking now “Cool, uh, wtf are the variable names I can use?”&lt;/p&gt;

&lt;p&gt;Answer: here they are: https://github.com/steglasaurous/audica-websocket-server&lt;/p&gt;

&lt;p&gt;This lists all the websocket events my mod will spit out from the game.  You access this via the audicaEventType variable like I did with that If action above.  All the possible event types are listed (like SongSelected, SongRestart, SongProgress, etc.)&lt;/p&gt;

&lt;p&gt;Also all the stuff listed under “data” for each event is available as variables.  ex: In that link above, the “SongSelected” event looks like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;eventType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SongSelected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;songId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EnvelopeVIP-Continuum_a436d6bf85e13804eae44e072e87c387&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;songName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Envelope VIP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;songArtist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TheFatRat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;songAuthor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Continuum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;difficulty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Expert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;classification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extras&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;songLength&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2:51&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ticksTotal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;130400.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in my “Set Song” action I did above, I could add things like “%songName% by %songArtist% mapped by %songAuthor% is playing.”&lt;/p&gt;

&lt;p&gt;Hope that’s helpful!  No doubt it’s a lot.  If you have questions or discussion points, feel free to drop into my discord
server &lt;a href=&quot;https://discord.gg/j6qArwGDu6&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Steg.&lt;/p&gt;</content><author><name></name></author><category term="audica" /><category term="streamer.bot" /><category term="streaming" /><category term="twitch" /><summary type="html">Want to trigger streamer.bot actions from Audica Websocket events? Here’s a quick-and-dirty way to do just that. :) Pre-requisites This depends on the Audica Websocket Server mod be installed in Audica. This also requires the excellent Streamer.bot app be installed as well. Setup the Basics In these steps, we’ll setup the websocket connection to Audica, and turning the event messages that are emitted from it into action arguments (variables) that can be accessed in subsequent subactions. Add a new action in your actions list. I called mine “Audica Websocket Message”. This will be the thing that takes apart the websocket message and puts it into variables you can use in subsequent subactions. Add a new Execute C# Code sub-action Paste this code in: using System; using Newtonsoft.Json.Linq; public class CPHInline { public bool Execute() { var audicaEvent = JObject.Parse(args[&quot;message&quot;].ToString()); CPH.SetArgument(&quot;audicaEventType&quot;, (string)audicaEvent[&quot;eventType&quot;]); foreach (JProperty prop in (JToken)audicaEvent[&quot;data&quot;]) { CPH.SetArgument(prop.Name, prop.Value.ToString()); } return true; } } At the bottom, goto the references tab and make sure these files are added as references: mscorlib.dll System.dll System.Core.dll You can right-click on the list to choose the dll to reference - it should put you right in the Microsoft.Net\Framework\v4.0.xxxx folder and should just be a matter of finding the files named above. Click “Save and Compile”. Under “Servers/Clients”, goto “Websocket Clients”, and add a new client. Endpoint: ws://127.0.0.1:8085/AudicaStats (or set the IP address to the machine Audica is running on if streamer.bot isn’t running on the same machine. Under Actions &amp;gt; Message: Set this to your Action you setup in step 1. (Audica Websocket Messages in my case) Setup Actions to trigger So at this point, we have code that’s taking the Audica events and turning them into variables your subactions can act on. Let’s do the songSelected event to get the selected song. Create a new action that will be the thing that will do something when there’s a song change. I called mine “Set Song Info”. For testing, I threw in a message to send the song title to my twitch chat. I created a “Twitch &amp;gt; Send Message” sub-action and in the message contents I put: %songName% is on now!. Go back to your Audica Websockets Message action. Add an If action (under Logic). This is where you can capture the events coming from audica. In our case we’re gonna catch the SongSelected event which contains the details of the song that was chosen. I pasted a screenshot here. And boom, it werks! :slight_smile: Available Variables You may be asking now “Cool, uh, wtf are the variable names I can use?” Answer: here they are: https://github.com/steglasaurous/audica-websocket-server This lists all the websocket events my mod will spit out from the game. You access this via the audicaEventType variable like I did with that If action above. All the possible event types are listed (like SongSelected, SongRestart, SongProgress, etc.) Also all the stuff listed under “data” for each event is available as variables. ex: In that link above, the “SongSelected” event looks like this: { &quot;eventType&quot;: &quot;SongSelected&quot;, &quot;data&quot;: { &quot;songId&quot;: &quot;EnvelopeVIP-Continuum_a436d6bf85e13804eae44e072e87c387&quot;, &quot;songName&quot;: &quot;Envelope VIP&quot;, &quot;songArtist&quot;: &quot;TheFatRat&quot;, &quot;songAuthor&quot;: &quot;Continuum&quot;, &quot;difficulty&quot;: &quot;Expert&quot;, &quot;classification&quot;: &quot;extras&quot;, &quot;songLength&quot;: &quot;2:51&quot;, &quot;ticksTotal&quot;: 130400.0 } } So in my “Set Song” action I did above, I could add things like “%songName% by %songArtist% mapped by %songAuthor% is playing.” Hope that’s helpful! No doubt it’s a lot. If you have questions or discussion points, feel free to drop into my discord server here! Steg.</summary></entry></feed>